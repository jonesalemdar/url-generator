"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateETag = exports.isCached = void 0;
const promises_1 = require("fs/promises");
async function isCached(headers, etag, filePath) {
    if (headers['cache-control'] &&
        headers['cache-control'].indexOf('no-cache') !== -1) {
        return false;
    }
    if ('if-none-match' in headers) {
        const ifNoneMatch = headers['if-none-match'];
        if (ifNoneMatch === '*') {
            return true;
        }
        if (ifNoneMatch === null) {
            return false;
        }
        if (typeof etag !== 'string') {
            return false;
        }
        const isMatching = ifNoneMatch === etag;
        if (isMatching) {
            return true;
        }
        return false;
    }
    if (headers['if-modified-since']) {
        const ifModifiedSince = headers['if-modified-since'];
        let lastModified;
        try {
            lastModified = (await (0, promises_1.stat)(filePath)).mtime;
        }
        catch {
        }
        if (lastModified !== undefined &&
            lastModified.getTime() <= Date.parse(ifModifiedSince)) {
            return true;
        }
    }
    return false;
}
exports.isCached = isCached;
async function generateETag(file) {
    const hash = new Bun.CryptoHasher('md5');
    hash.update(await file.arrayBuffer());
    return hash.digest('base64');
}
exports.generateETag = generateETag;
